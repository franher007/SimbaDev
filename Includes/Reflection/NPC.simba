{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once Menu.simba}
{$include_once Inventory.simba}
{$include_once Mouse.simba}
{$include_once Timing.simba}
type
  TNPC = record
    ID: Int32;
    Name: String;
    CombatLevel: Int32;
    Actions: Array of String;
    Tile: RSTile;
    AnimationId: Int32;
    Orientation: Int32;
    Health: Int32;
    InteractingIndex: Int32;
    Visible: Boolean;
  end;


Function R_GetNPCs: Array of TNPC;
var
  I: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Result[I].ID := Definition.ID;
    Result[I].Name := Definition.Name;
    Result[I].Actions := Definition.Actions;
    Result[I].Tile := NPCs[I].Tile;
    Result[I].AnimationID := NPCs[I].AnimationId;
    Result[I].Orientation := NPCs[I].Orientation;
    Result[I].Health := NPCs[I].Health;
    Result[I].InteractingIndex := NPCs[I].InteractingIndex;
    Result[I].Visible := Definition.IsVisible;
    Definition.Free;
  end;

  RSTypeArray(NPCs).Free;
end;

Function R_GetNPCs(ID: Int32): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Result[J].ID := Definition.ID;

    if Result[J].ID = ID then
    begin
      Result[J].Name := Definition.Name;
      Result[J].Actions := Definition.Actions;
      Result[J].Tile := NPCs[I].Tile;
      Result[J].AnimationID := NPCs[I].AnimationId;
      Result[J].Orientation := NPCs[I].Orientation;
      Result[J].Health := NPCs[I].Health;
      Result[J].InteractingIndex := NPCs[I].InteractingIndex;
      Result[J].Visible := Definition.IsVisible;
      Inc(J);
    end;
    Definition.Free;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;

Function R_GetNPCs(Name: String): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Result[J].Name := Definition.Name;

    if Result[J].Name = Name then
    begin
      Result[J].ID := Definition.ID;
      Result[J].Actions := Definition.Actions;
      Result[J].Tile := NPCs[I].Tile;
      Result[J].AnimationID := NPCs[I].AnimationId;
      Result[J].Orientation := NPCs[I].Orientation;
      Result[J].Health := NPCs[I].Health;
      Result[J].InteractingIndex := NPCs[I].InteractingIndex;
      Result[J].Visible := Definition.IsVisible;
      Inc(J);
    end;
    Definition.Free;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;

Function R_GetNPCs(Tile: RSTile): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Result[J].Tile := NPCs[I].Tile;

    if Result[J].Tile = Tile then
    begin
      Definition := NPCs[I].Definition;
      Result[J].ID := Definition.ID;
      Result[J].Name := Definition.Name;
      Result[J].Actions := Definition.Actions;
      Result[J].Tile := NPCs[I].Tile;
      Result[J].AnimationID := NPCs[I].AnimationId;
      Result[J].Orientation := NPCs[I].Orientation;
      Result[J].Health := NPCs[I].Health;
      Result[J].InteractingIndex := NPCs[I].InteractingIndex;
      Result[J].Visible := Definition.IsVisible;
      Definition.Free;
      Inc(J);
    end;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;
(*
R_NPCIsVisible
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns True if NPC is visible on screen.
Example:
   writeln(R_NPCIsVisible(1173));
*)
Function R_NPCIsVisible(ID: Int32): Boolean;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.IsVisible;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCIsVisible(Name: String): Boolean; overload;
var
  npcs: Array of RSNPC;
  i: Integer;
begin
  npcs := RSClient.AllNPCs;
  for i := 0 to length(npcs) - 1 do
  begin
    if (npcs[i].Definition.Name = Name) then
      exit(True);
  end;
end;

(*
R_NPCGetCombatLevel
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns the combat level of the given NPC if they are on screen
  or 0 if the NPC is not on screen.
Example:
   writeln(R_NPCGetCombatLevel(1173));
*)
Function R_NPCGetCombatLevel(ID: Int32): Int32;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.CombatLevel;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetCombatLevel(Name: String): Int32; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      Result := Definition.CombatLevel;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetName
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns the name of the given NPC if they are on screen.
Example:
   writeln(R_NPCGetName(3114));
*)
Function R_NPCGetName(ID: Int32): String;
var
  npcs: Array of RSNPC;
  i: Integer;
begin
  npcs := RSClient.AllNPCs;
  for i := 0 to length(npcs) - 1 do
  begin
    if (npcs[i].Definition.ID = ID) then
      exit(npcs[i].Definition.Name);
  end;
end;

(*
R_NPCGetID
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns the ID of the given NPC if they are on screen.
Example:
   writeln(R_NPCGetID('Chicken'));
*)
Function R_NPCGetID(Name: String): TIntegerArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, ID: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if ((Definition.Name = Name) and (not (Result.Find(Definition.ID) > -1))) then
      Result += ID;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetActions
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns the actions of the given NPC if they are on screen.
Example:
   writeln(R_NPCGetActions(3114));
*)
Function R_NPCGetActions(ID: Int32): TStringArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, J: Integer;
  Actions: TStringArray;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.Actions;
      Definition.Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetActions(Name: String): TStringArray; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, J: Integer;
  Actions: TStringArray;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      Result := Definition.Actions;
      Definition.Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPC_Get(id: Integer): Array of RSNPC;
var
  allNpcs: Array of RSNPC;
  i, j: Integer;
begin
  allNpcs := RSNPC.AllNPCs;
  for I := 0 to High(allNpcs) do
  begin
    if allNpcs[i].Definition.ID = id then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[j] := allNpcs[I];
      inc(j);
    end;
  end;
end;

Function R_NPC_GetFirst(id: Integer): RSNPC;
var
  allNpcs: Array of RSNPC;
  i: Integer;
begin
  allNpcs := RSNPC.AllNPCs;
  writeln('a');
  writeln(allNpcs);
  for I := 0 to High(allNpcs) do
  begin
    writeln(allNpcs[i].Definition.ID);
    if allNpcs[i].Definition.ID = id then
    begin
      Result := allNpcs[I];
      Break;
    end;
  end;
end;

Function R_NPC_GetClosest(id: Integer; max: Integer = 32): RSNPC;
var
  allNpcs, ourNPCs: Array of RSNPC;
  i,j: Integer;
  currentDist: integer;
  closestNPC: RSNPC;
  highNpcs: integer;
begin
  allNpcs := RSNPC.AllNPCs;
  j := 0;
  if (length(allnpcs) > max) then
    highNpcs := max
  else
    highNpcs := length(allNpcs)-1;
  for I := 0 to highNpcs do
  begin
    if allNpcs[i].Definition.ID = id then
    begin
      SetLength(ourNPCs, j+1);
      ourNPCs[j] := allNpcs[I];
      inc(j);
      //Break;
    end;
  end;
  if Length(ourNPCs) < 1 then Exit;
  currentDist := Distance(RSPlayer.Me.Tile.X, RSPlayer.Me.Tile.Y, ourNPCs[0].Tile.X, ourNPCs[0].Tile.Y);
  for i := 0 to High(ourNpcs) do
  begin
     if Distance(RSPlayer.Me.Tile.X, RSPlayer.Me.Tile.Y, ourNPCs[i].Tile.X, ourNPCs[i].Tile.Y) < currentDist then
     begin
      closestNPC := ourNPCs[i];
      currentDist := Distance(RSPlayer.Me.Tile.X, RSPlayer.Me.Tile.Y, ourNPCs[i].Tile.X, ourNPCs[i].Tile.Y);
     end;
  end;
  Result := closestNPC;
  //RSTypeArray(allNpcs).Free;
  //RSTypeArray(ourNPCs).Free;
end;
