{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once Menu.simba}
{$include_once Inventory.simba}     
{$include_once franher/shared.simba}

const
  VARBIT_CURRENT_SLOT = 4439;
  VARBIT_SLOT_REMAINING_1 = 4396;

{$scopedenums on}
type
  TRSOfferQuantity = (ONE, TEN, HUNDRED, ALL, X);
  TRSOfferPrice = (MINUSFIVE, GUIDE, X, PLUSFIVE, PLUSONE, MINUSONE);
{$scopedenums off}

Function R_GrandExchangeScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_GRAND_EXCHANGE_CONTAINER.Group, R_GRAND_EXCHANGE_CONTAINER.Child);
end;

Function R_GrandExchange_Back: Boolean;
var
  widget: RSWidget;
begin
  widget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_BACK.Group, R_GRAND_EXCHANGE_OFFER_BACK.Child);
  if widget.ref = nil then
    Exit(False);

  if widget.IsHidden then
    Exit(False);

  Mouse.Click(widget.Bounds.Middle.X, widget.Bounds.Middle.y, MOUSE_LEFT);
  widget.Free;
  Result := True;
end;

Function R_GrandExchangeOfferScreen: Boolean;
begin
  Result := not RSWidget.Get(R_GRAND_EXCHANGE_OFFER_CONTAINER.Group, R_GRAND_EXCHANGE_OFFER_CONTAINER.Child).IsHidden;
end;

Function R_WaitGrandExchangeScreen(timeout: UInt32): Boolean;
begin
  Result := R_WaitFunction(timeout, 50, @R_GrandExchangeScreen);
end;

Function R_GrandExchangeScreen_Close: Boolean;
var
  Widget: RSWidget;
begin

  R_GrandExchange_Back;

  if not R_GrandExchangeScreen then
    Exit;

  Widget := RSWidget.Get(R_GRAND_EXCHANGE_CLOSE.Group, R_GRAND_EXCHANGE_CLOSE.Child, R_GRAND_EXCHANGE_CLOSE.Index);

  if Widget.ref = nil then
    Exit(False);

  Mouse.Move(Widget.Bounds);
  Wait(50 + RandomRange(0, 50));
  Mouse.Click(MOUSE_LEFT);
  Widget.Free;
  Result := True;
end;

Function R_CurrentGrandExchangeSlot: Int32;
begin
  Result := RSClient.getVarbit(VARBIT_CURRENT_SLOT);
end;

Function R_GrandExchangeCanCollect: Boolean;
begin
  Result := not RSWidget.Get(R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Group, R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Child, R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Index).IsHidden;
end;

Function R_GrandExchangeCollectAll: Boolean;
var
  collectWidget: RSWidget;
begin
  if not R_GrandExchangeScreen then
    Exit;

  R_GrandExchange_Back;
  sleep(random(500, 700));

  collectWidget := RSWidget.Get(R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Group, R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Child, R_GRAND_EXCHANGE_SLOT_CONTAINER_COLLECT.Index);
  if collectWidget.ref = nil then
    Exit(False);

  if collectWidget.IsHidden then
    Exit(False);

  Mouse.Move(collectWidget.Bounds.Middle.X, collectWidget.Bounds.Middle.Y);
  Wait(50 + RandomRange(0, 50));
  Mouse.Click(MOUSE_LEFT);
  collectWidget.Free;
  Result := True;
end;

Function R_SelectGrandExchangeSlot(Index: Int32): Boolean;
var
  slotWidget: RSWidget;
  T: Timer;
  slotVars: Array of RWidget;
begin
  if (Index < 0) or (Index > 7) then
    Exit(False);

  if not R_GrandExchangeScreen then
    Exit(False);

  if R_CurrentGrandExchangeSlot = Index+1 then
    Exit(True);

  slotVars :=   [R_GRAND_EXCHANGE_SLOT_1, R_GRAND_EXCHANGE_SLOT_2,
                 R_GRAND_EXCHANGE_SLOT_3, R_GRAND_EXCHANGE_SLOT_4,
                 R_GRAND_EXCHANGE_SLOT_5, R_GRAND_EXCHANGE_SLOT_6,
                 R_GRAND_EXCHANGE_SLOT_7, R_GRAND_EXCHANGE_SLOT_8];

  slotWidget := RSWidget.Get(slotVars[Index].Group, slotVars[Index].Child);
  if slotWidget.ref = nil then Exit(false);

  Mouse.Click(slotWidget.Bounds.Middle, MOUSE_LEFT);
  slotWidget.Free;

  T.Start;
  while R_CurrentGrandExchangeSlot <> Index do
  begin
    if T.ElapsedTime > 1000 then
      Exit(False);
    Wait(Random(50, 100));
  end;
  Result := R_CurrentGrandExchangeSlot = Index;
end;

Function R_GrandExchange_EmptySlots(totalSlots: Int32 = 2): Int32;
var
  i, j: Integer;
  buySpriteWidget: RSWidget;
  spriteVars: Array of RWidget;
begin

  //if not R_GrandExchangeScreen then
  //  Exit(0);
  j := 0;
  spriteVars :=  [R_GRAND_EXCHANGE_SLOT_TITLE_1, R_GRAND_EXCHANGE_SLOT_TITLE_2,
                R_GRAND_EXCHANGE_SLOT_TITLE_3, R_GRAND_EXCHANGE_SLOT_TITLE_4,
                R_GRAND_EXCHANGE_SLOT_TITLE_5, R_GRAND_EXCHANGE_SLOT_TITLE_6,
                R_GRAND_EXCHANGE_SLOT_TITLE_7, R_GRAND_EXCHANGE_SLOT_TITLE_8];

  for i := 0 to totalSlots do
  begin
    buySpriteWidget := RSWidget.Get(spriteVars[i].Group, spriteVars[i].Child, spriteVars[i].Index);
    if not ((buySpriteWidget.ref = nil) or (buySpriteWidget.text <> "Empty")) then
    begin
      j += 1;
    end;
    buySpriteWidget.Free;
  end;
  Result := j;
end;

Function R_GrandExchange_EmptyAllSlots(totalSlots: Int32 = 3): Boolean;
var
  i: Integer;
  abortWidget, offerTitle: RSWidget;
  titleVars: Array of RWidget;
begin

  if not R_GrandExchangeScreen then
    Exit(False);

  R_GrandExchangeCollectAll;
  sleep(random(1200, 1400));

  titleVars :=  [R_GRAND_EXCHANGE_SLOT_TITLE_1, R_GRAND_EXCHANGE_SLOT_TITLE_2,
                R_GRAND_EXCHANGE_SLOT_TITLE_3, R_GRAND_EXCHANGE_SLOT_TITLE_4,
                R_GRAND_EXCHANGE_SLOT_TITLE_5, R_GRAND_EXCHANGE_SLOT_TITLE_6,
                R_GRAND_EXCHANGE_SLOT_TITLE_7, R_GRAND_EXCHANGE_SLOT_TITLE_8];

  for i := 0 to totalSlots-1 do
  begin
    offerTitle := RSWidget.Get(titleVars[i].Group, titleVars[i].Child, titleVars[i].Index);
    if ((offerTitle.ref = nil) or offerTitle.IsHidden or (offerTitle.Text = "Empty")) then
    begin
      offerTitle.Free;
      Continue;
    end;
    R_SelectGrandExchangeSlot(i);
    sleep(random(1200, 1400));
    abortWidget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ABORT.Group, R_GRAND_EXCHANGE_OFFER_ABORT.Child, R_GRAND_EXCHANGE_OFFER_ABORT.Index);
    if abortWidget.ref = nil then
      Exit(False);
    Mouse.Click(abortWidget.Bounds.Middle, 3, MOUSE_LEFT);
    abortWidget.Free;
    Result := True;
    sleep(random(1200,1400));
    R_GrandExchange_Back;
    sleep(random(1200,1400));
    offerTitle.Free;
  end;

  R_GrandExchangeCollectAll;
  sleep(random(700, 900));
end;

Function R_GrandExchange_EmptyItem(itemName:String; totalSlots: Int32 = 3): Boolean;
var
  i: Integer;
  abortWidget, offerTitle, offerItem: RSWidget;
  titleVars, itemNameVars: Array of RWidget;
begin

  if not R_GrandExchangeScreen then
    Exit(False);

  //R_GrandExchangeCollectAll;
  //sleep(random(1200, 1400));

  titleVars :=  [R_GRAND_EXCHANGE_SLOT_TITLE_1, R_GRAND_EXCHANGE_SLOT_TITLE_2,
                R_GRAND_EXCHANGE_SLOT_TITLE_3, R_GRAND_EXCHANGE_SLOT_TITLE_4,
                R_GRAND_EXCHANGE_SLOT_TITLE_5, R_GRAND_EXCHANGE_SLOT_TITLE_6,
                R_GRAND_EXCHANGE_SLOT_TITLE_7, R_GRAND_EXCHANGE_SLOT_TITLE_8];

  itemNameVars :=  [R_GRAND_EXCHANGE_SLOT_ITEM_NAME_1, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_2,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_3, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_4,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_5, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_6,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_7, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_8];

  for i := 0 to totalSlots-1 do
  begin
    offerTitle := RSWidget.Get(titleVars[i].Group, titleVars[i].Child, titleVars[i].Index);
    if ((offerTitle.ref = nil) or offerTitle.IsHidden or (offerTitle.Text = "Empty")) then
    begin
      offerTitle.Free;
      Continue;
    end;
    offerItem := RSWidget.Get(itemNameVars[i].Group, itemNameVars[i].Child, itemNameVars[i].Index);
    if offerItem.Text <> itemName then Continue;
    R_SelectGrandExchangeSlot(i);
    sleep(random(500, 700));
    abortWidget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ABORT.Group, R_GRAND_EXCHANGE_OFFER_ABORT.Child, R_GRAND_EXCHANGE_OFFER_ABORT.Index);
    if abortWidget.ref = nil then
      Exit(False);
    Mouse.Click(abortWidget.Bounds.Middle, 3, MOUSE_LEFT);
    abortWidget.Free;
    Result := True;
    sleep(random(1200,1400));
    R_GrandExchange_Back;
    sleep(random(1200,1500));
    offerTitle.Free;
  end;
  offerItem.Free;   
  sleep(random(1200, 1400));
  R_GrandExchangeCollectAll;
  sleep(random(1200, 1400));  
  //RSTypeArray(titleVars).Free;
  //RSTypeArray(itemNameVars).Free;
end;

Function R_GrandExchange_CountItem(itemName:String; totalSlots: Int32 = 3): Integer;
var
  i: Integer;
  offerTitle, offerItemName, offerItem: RSWidget;
  titleVars, itemNameVars, itemVars: Array of RWidget;
begin

  if not R_GrandExchangeScreen then
    Exit;

  //R_GrandExchangeCollectAll;
  //sleep(random(1200, 1400));

  titleVars :=  [R_GRAND_EXCHANGE_SLOT_TITLE_1, R_GRAND_EXCHANGE_SLOT_TITLE_2,
                R_GRAND_EXCHANGE_SLOT_TITLE_3, R_GRAND_EXCHANGE_SLOT_TITLE_4,
                R_GRAND_EXCHANGE_SLOT_TITLE_5, R_GRAND_EXCHANGE_SLOT_TITLE_6,
                R_GRAND_EXCHANGE_SLOT_TITLE_7, R_GRAND_EXCHANGE_SLOT_TITLE_8];

  itemNameVars :=  [R_GRAND_EXCHANGE_SLOT_ITEM_NAME_1, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_2,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_3, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_4,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_5, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_6,
                R_GRAND_EXCHANGE_SLOT_ITEM_NAME_7, R_GRAND_EXCHANGE_SLOT_ITEM_NAME_8];

  itemVars :=  [R_GRAND_EXCHANGE_SLOT_ITEM_1, R_GRAND_EXCHANGE_SLOT_ITEM_2,
                R_GRAND_EXCHANGE_SLOT_ITEM_3, R_GRAND_EXCHANGE_SLOT_ITEM_4,
                R_GRAND_EXCHANGE_SLOT_ITEM_5, R_GRAND_EXCHANGE_SLOT_ITEM_6,
                R_GRAND_EXCHANGE_SLOT_ITEM_7, R_GRAND_EXCHANGE_SLOT_ITEM_8];

  for i := 0 to totalSlots-1 do
  begin
    offerTitle := RSWidget.Get(titleVars[i].Group, titleVars[i].Child, titleVars[i].Index);
    if ((offerTitle.ref = nil) or offerTitle.IsHidden or (offerTitle.Text = "Empty")) then
    begin
      offerTitle.Free;
      Continue;
    end;
    offerItemName := RSWidget.Get(itemNameVars[i].Group, itemNameVars[i].Child, itemNameVars[i].Index);
    if offerItemName.Text <> itemName then
    begin
      offerITemName.Free;
      Continue;
    end;
    offerItem := RSWidget.Get(itemVars[i].Group, itemVars[i].Child, itemVars[i].Index);
    if offerItem.ref <> nil then Result := offerItem.ItemAmount;
    offerItem.Free;
    offerTitle.Free;
    Break;
  end;
  offerItem.Free;
  //RSTypeArray(titleVars).Free;
  //RSTypeArray(itemVars).Free;
  //RSTypeArray(itemNameVars).Free;
end;

Function R_GrandExchange_Offer_Add_Quantity(Mode: TRSOfferQuantity; XAmount: Int32 = -1): Boolean;
var
  Button: RSWidget;
begin
  //if not R_GrandExchangeOfferScreen then
  //  Exit(False);
  writeln('Setting offer quantity');
  case Mode of
    TRSOfferQuantity.ONE:  begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_1.Group, R_GRAND_EXCHANGE_OFFER_ADD_1.Child, R_GRAND_EXCHANGE_OFFER_ADD_1.Index) end;
    TRSOfferQuantity.TEN: begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_10.Group, R_GRAND_EXCHANGE_OFFER_ADD_10.Child, R_GRAND_EXCHANGE_OFFER_ADD_10.Index) end;
    TRSOfferQuantity.HUNDRED:  begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_100.Group, R_GRAND_EXCHANGE_OFFER_ADD_100.Child, R_GRAND_EXCHANGE_OFFER_ADD_100.Index) end;
    TRSOfferQuantity.ALL:    begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_ALL.Group, R_GRAND_EXCHANGE_OFFER_ADD_ALL.Child, R_GRAND_EXCHANGE_OFFER_ADD_ALL.Index) end;
    TRSOfferQuantity.X:
    begin
      Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_X.Group, R_GRAND_EXCHANGE_OFFER_ADD_X.Child, R_GRAND_EXCHANGE_OFFER_ADD_X.Index);
      if Button.ref = nil then
        Exit(False);

      Mouse.Click(Button.Bounds, MOUSE_LEFT);
      Button.Free;
      sleep(random(2000,2500));
      SendKeys(IntToStr(XAmount), Random(30, 60),Random(30, 60));
      PressKey(13);
      sleep(Random(30, 60));
      Exit(True);
    end;
  end;

  if Button.ref = nil then
    Exit(False);

  Mouse.Click(Button.Bounds, MOUSE_LEFT);
  Button.Free;

  Result := True;
end;

Function R_GrandExchange_Offer_Set_Price(Mode: TRSOfferPrice; XAmount: Int32 = -1): Boolean;
var
  Button: RSWidget;
begin
  //if not R_GrandExchangeOfferScreen then
  //  Exit(False);

  case Mode of
    TRSOfferPrice.MINUSFIVE:  begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_DECREASE_5.Group, R_GRAND_EXCHANGE_OFFER_PRICE_DECREASE_5.Child, R_GRAND_EXCHANGE_OFFER_PRICE_DECREASE_5.Index) end;
    TRSOfferPrice.PLUSFIVE: begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_INCREASE_5.Group, R_GRAND_EXCHANGE_OFFER_PRICE_INCREASE_5.Child, R_GRAND_EXCHANGE_OFFER_PRICE_INCREASE_5.Index) end;
    TRSOfferPrice.GUIDE:  begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_SET_GUIDE.Group, R_GRAND_EXCHANGE_OFFER_PRICE_SET_GUIDE.Child, R_GRAND_EXCHANGE_OFFER_PRICE_SET_GUIDE.Index) end;
    TRSOfferPrice.PLUSONE:    begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_ADD_1.Group, R_GRAND_EXCHANGE_OFFER_PRICE_ADD_1.Child, R_GRAND_EXCHANGE_OFFER_PRICE_ADD_1.Index) end;
    TRSOfferPrice.MINUSONE:    begin Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_REMOVE_1.Group, R_GRAND_EXCHANGE_OFFER_PRICE_REMOVE_1.Child, R_GRAND_EXCHANGE_OFFER_PRICE_REMOVE_1.Index) end;
    TRSOfferPrice.X:
    begin
      Button := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_PRICE_X.Group, R_GRAND_EXCHANGE_OFFER_PRICE_X.Child, R_GRAND_EXCHANGE_OFFER_PRICE_X.Index);
      if Button.ref = nil then
        Exit(False);
      Mouse.Click(Button.Bounds, MOUSE_LEFT);
      Button.Free;
      sleep(random(2000,2500));
      SendKeys(IntToStr(XAmount), Random(30, 60),Random(30, 60));
      PressKey(13);
      sleep(Random(30, 60));
      Exit(True);
    end;
  end;

  if Button.ref = nil then
    Exit(False);

  Mouse.Click(Button.Bounds, MOUSE_LEFT);
  Button.Free;

  Result := True; //TODO: Check if the mode actually changed by checking button spriteId..
end;

Function R_GrandExchange_Sell(itemID: int32; Mode: TRSOfferQuantity = TRSOfferQuantity.ALL; XAmount: Int32 = -1; PriceMode: TRSOfferPrice = TRSOfferPrice.GUIDE; XPrice: Int32 = -1 ): Boolean;
var
  confirmWidget: RSWidget;
  items: Array of TRSInventoryItem;
begin
  if not R_GrandExchangeScreen then
    Exit(False);
  if R_GrandExchange_EmptySlots = 0 then
  begin
    writeln('Not enough slots');
    Exit(False);
  end;

  items := R_GetInventoryItem(itemID);
  if items = nil then
    Exit(False);

  Mouse.click(items[random(0,high(items))].Bounds.Middle, MOUSE_LEFT);
  sleep(random(1500,2000));
  R_GrandExchange_Offer_Add_Quantity(Mode, XAmount);
  sleep(random(800,1000));
  R_GrandExchange_Offer_Set_Price(PriceMode, XPrice);
  sleep(random(800,1000));
  confirmWidget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_CONFIRM.Group, R_GRAND_EXCHANGE_OFFER_CONFIRM.Child);
  if confirmWidget.ref = nil then
    Exit(False);
  Mouse.Click(confirmWidget.Bounds, MOUSE_LEFT);
  confirmWidget.Free;
  Result := True;
end;


Function R_GrandExchange_Buy(itemName: String; Mode: TRSOfferQuantity = TRSOfferQuantity.ONE; XAmount: Int32 = -1; PriceMode: TRSOfferPrice = TRSOfferPrice.GUIDE; XPrice: Int32 = -1; totalSlots: Int32 = 2 ): Boolean;
var
  i, j: Integer;
  confirmWidget, buySpriteWidget, titleWidget: RSWidget;
  items: Array of TRSInventoryItem;
  chatboxItems: Array of RSWidget;
  spriteVars, buyVars: Array of RWidget;

begin
  writeln('Attempting to buy: ' + itemName);
  if not R_GrandExchangeScreen then
  begin
    writeln('e');
    Exit(False);
  end;

  if R_GrandExchange_EmptySlots = 0 then
  begin
    writeln('Not enough slots');
    Exit(False);
  end;

  items := R_GetInventoryItem(995);
  if items = nil then
  begin
    Writeln('No coins in inventory');
    Exit(False);
  end;

  buyVars :=  [R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_1, R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_2,
                R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_3, R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_4,
                R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_5, R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_6,
                R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_7, R_GRAND_EXCHANGE_SLOT_BUY_SPRITE_8];

  spriteVars :=  [R_GRAND_EXCHANGE_SLOT_TITLE_1, R_GRAND_EXCHANGE_SLOT_TITLE_2,
                R_GRAND_EXCHANGE_SLOT_TITLE_3, R_GRAND_EXCHANGE_SLOT_TITLE_4,
                R_GRAND_EXCHANGE_SLOT_TITLE_5, R_GRAND_EXCHANGE_SLOT_TITLE_6,
                R_GRAND_EXCHANGE_SLOT_TITLE_7, R_GRAND_EXCHANGE_SLOT_TITLE_8];

  for i := 0 to totalSlots do
  begin
    titleWidget := RSWidget.Get(spriteVars[i].Group, spriteVars[i].Child, spriteVars[i].Index);
    if (titleWidget.ref = nil) or (titleWidget.text <> "Empty") then
    begin
      titleWidget.Free;
      Continue;
    end;
    buySpriteWidget:= RSWidget.Get(buyVars[i].Group, buyVars[i].Child, buyVars[i].Index);
    Mouse.Move(buySpriteWidget.Bounds.Middle.X, buySpriteWidget.Bounds.Middle.Y);
    Wait(50 + RandomRange(0, 50));
    Mouse.Click(MOUSE_LEFT);
    buySpriteWidget.Free;
    sleep(random(1500, 2500));
    SendKeys(itemName, Random(30, 60), Random(30, 60));
    sleep(random(2000, 2500));
    chatboxItems := RSWidget.Get(R_GRAND_EXCHANGE_CHATBOX_ITEMS.Group, R_GRAND_EXCHANGE_CHATBOX_ITEMS.Child).Children;
    for j := 0 to high(chatboxItems) do
    begin
      if chatboxItems[j].Text = itemName then
      begin
        Mouse.Click(chatboxItems[j].Bounds.Middle, 3, MOUSE_LEFT); 
        sleep(random(1200, 1500));
        //RSTypeArray(chatboxITems).Free;
        R_GrandExchange_Offer_Add_Quantity(Mode, XAmount);
        sleep(random(1200,1500));
        R_GrandExchange_Offer_Set_Price(PriceMode, XPrice);
        sleep(random(1200,1500));
        confirmWidget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_CONFIRM.Group, R_GRAND_EXCHANGE_OFFER_CONFIRM.Child);
        if confirmWidget.ref = nil then
          Exit(False);
        Mouse.Click(confirmWidget.Bounds.Middle, MOUSE_LEFT);
        confirmWidget.Free;
        Exit(True);
      end;
    end;
  end;
  Result := False;
  //RSTypeArray(chatboxITems).Free;
  //RSTypeArray(buyVars).Free;
  //RSTypeArray(spriteVars).Free;
end;


Function openClosestExchange: Boolean;
var
  exchangeBooth: RSObject;
  tries: Integer;
begin
  tries := 0;
  while not R_GrandExchangeScreen do
  begin
    inc(tries);
    writelnex("Opening GE");
    exchangeBooth := R_GetClosestObjectByName("Grand Exchange booth", 10, "Exchange Grand");
    if (tries > 15) then
    begin
      writelnex("GE not found");
      exchangeBooth.Free;
      Exit(False);
    end;
    if exchangeBooth.ref <> nil then
    begin
      Mouse.Click(exchangeBooth.MidPoint, 3, MOUSE_LEFT);
      condWait(@R_GrandExchangeScreen, 5000, true);
    end;
    exchangeBooth.Free;
  end;
  Result := True;
  sleep(random(1500,1800));
end;

procedure sellCancelAndCollect(itemName: String;itemID, price:Integer);
begin
  writelnex('Selling ' + itemName + ' for ' + inttostr(price));
  if not openClosestExchange then Exit;
  //cancel current offer and collect
  if R_GrandExchange_EmptyItem(itemName) then sleep(random(1200,1400));;
  if R_GrandExchangeCollectAll then sleep(random(1200,1400));

  //SELL STUFF
  R_GrandExchange_Sell(itemID, TRSOfferQuantity.ALL, 1, TRSOfferPrice.X, price);
  sleep(random(1200,1400));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));
end;

procedure buyCancelAndCollect(itemName: String;quantity, price:Integer);
begin
  writelnex('Buying ' + inttostr(quantity) + " " + itemName + ' for ' + inttostr(price));
  if not openClosestExchange then Exit;
  //cancel current offer and collect
  if R_GrandExchangeCollectAll then sleep(random(1200,1400));
  if R_GrandExchange_EmptyItem(itemName) then sleep(random(1200,1400));
  if R_GrandExchangeCollectAll then sleep(random(1200,1400));

  //BUY STUFF
  R_GrandExchange_Buy(itemName, TRSOfferQuantity.X, quantity, TRSOfferPrice.X, price);
  sleep(random(1200,1400));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));
end;

procedure countGrandExchangeItems;
begin
  if not openClosestExchange then Exit;
  pizzasInGE := R_GrandExchange_CountItem("Pizza base");
  grainsInGe := R_GrandExchange_CountItem("Grain");
end;

