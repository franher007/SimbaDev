{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once franher/shared.simba}

type
  TRSPlayer = record
    Name: String;
    Tile: TPoint;
    Destination: TPoint;
    CombatLevel: Int32;
    Equipment: Array of Int32;
    AnimationId: Int32;
    Health: Int32;
    Orientation: Int32;
  end;

Function R_GetMe: TRSPlayer;
var
  LocalPlayer: RSPlayer;
  Definition: RSPlayerDefinition;
begin
  LocalPlayer := RSPlayer.Me;
  Definition := LocalPlayer.Definition;
  Result.Name := LocalPlayer.Name;
  Result.Tile := LocalPlayer.Tile;
  Result.Destination := LocalPlayer.Destination;
  Result.CombatLevel := LocalPlayer.CombatLevel;
  Result.Equipment := Definition.Equipment;
  Result.AnimationId := LocalPlayer.AnimationId;
  Result.Health := LocalPlayer.Health;
  Result.Orientation := LocalPlayer.Orientation;
  Definition.Free;
  LocalPlayer.Free;
end;

Function R_GetPlayers: Array of TRSPlayer;
var
  I: Int32;
  Players: Array of RSPlayer;
  Definition: RSPlayerDefinition;
begin
  Players := RSPlayer.AllPlayers;
  SetLength(Result, Length(Players));
  for I := 0 to high(Players) do
  begin
    Definition := Players[I].Definition;
    Result[I].Name := Players[I].Name;
    Result[I].Tile := Players[I].Tile;
    Result[I].Destination := Players[I].Destination;
    Result[I].CombatLevel := Players[I].CombatLevel;
    Result[I].Equipment := [];
    Result[I].AnimationId := Players[I].AnimationId;
    Result[I].Health := Players[I].Health;
    Result[I].Orientation := Players[I].Orientation;
    Definition.Free;
  end;
  RSTypeArray(Players).Free;
end;

Function R_GetAnimation: Int32;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.AnimationId;
  Me.Free;
end;

Function R_IsMoving: Boolean;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.IsMoving;
  Me.Free;
end;

Function R_GetDestination: RSTile;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.Destination;
  Me.Free;
end;

//end repo

Function RSPlayer.ToggleRun(run: boolean): Boolean;
var
  widget: RSWidget;
begin
  if run then
  begin
    if RSVarps.VarpMain(173) = 1 then Exit(True);
    widget := RSWidget.Get(R_INTERFACE_MINIMAP_ORB_RUN_ICON.Group, R_INTERFACE_MINIMAP_ORB_RUN_ICON.Child);
    Mouse.Click(widget.bounds, MOUSE_LEFT);
    widget.Free;
    Exit(True);
  end else
  begin
    if RSVarps.VarpMain(173) = 0 then Exit(True);
    widget := RSWidget.Get(R_INTERFACE_MINIMAP_ORB_RUN_ICON.Group, R_INTERFACE_MINIMAP_ORB_RUN_ICON.Child);
    Mouse.Click(widget.bounds, MOUSE_LEFT);
    widget.Free;
    Exit(True);
  end;
end;

Function RSPlayer.inGE: boolean;
begin
  Result := self.Tile.InBox(Box(3155, 3470, 3176, 3494));
end;

Function RSPlayer.inGrains: boolean;
begin
  Result := self.Tile.InBox(Box(3138, 3458, 3144, 3464));
end;

Function RSPlayer.inGuild: boolean;
begin
  Result := self.Tile.InBox(Box(3138, 3444, 3147, 3453));
end;

Function RSPlayer.inLumby: boolean;
begin
  Result := self.Tile.InBox(Box(3212, 3206, 3252, 3261));
end;

Function RSPlayer.inWestBank: boolean;
begin
  Result := self.Tile.InBox(Box(3180, 3433, 3190, 3447));
end;

Function RSPlayer.inEastBank: boolean;
begin
  Result := self.Tile.InBox(Box(3250, 3418, 3257, 3424));
end;

Function RSPlayer.inWildDitch: boolean;
begin
  Result := self.Tile.InBox(Box(3316, 3516, 3331, 3527));
end;

