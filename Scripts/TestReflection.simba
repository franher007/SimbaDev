{$i Reflection/Reflection.simba}
{$i Reflection/GrandExchange.simba}
{$i SRL/osr.simba}

procedure clickMe;
var
  players: Array of RSPlayer;
  i: Integer;
begin
  players := RSPlayer.AllPlayers;
  for i := 0 to High(players) do
  begin
    if players[i].Name <> "" then
      writeln(players[i].Name);
      if players[i].Name = "Franher007" then
      begin
        writeln("clicky");
        writeln(players[i].LocalTile.TileToMS);
        mouse.Click(players[i].LocalTile.TileToMS, MOUSE_RIGHT);
        TerminateScript;
      end
  end
end

procedure bankMe;
var
  items:  Array of TRSBankItem;
  i: Integer;
begin
  R_BankScreen_Close;
  TerminateScript;
  items := R_GetAllBankItems;
  for i := 0 to High(ITEMS) do
  begin
    writeln(intToStr(items[i].ID) + " - " + items[i].Name + " - " + intToStr(items[i].Amount));
    //if players[i].Name <> "" then
    //  writeln(players[i].Name);
    //  if players[i].Name = "Franher007" then
    //  begin
    //    writeln("clicky");
    //    writeln(players[i].LocalTile.TileToMS);
    //    mouse.Click(players[i].LocalTile.TileToMS, MOUSE_RIGHT);
    //    TerminateScript;
     // end
  end
end

procedure getNpc;
var
  npcs : Array of RSNPC;
  i: Integer;
begin
  npcs :=  RSNPC.AllNPCs;

  for i := 0 to High(npcs) do
  begin
    if npcs[i].ref <> nil then
      if npcs[i].Definition.Name = "Banker" then writeln(npcs[i].LocalTile);
  end
end


procedure getObject(x,y: integer);
var
  objects : Array of RSObject;
  obj : RSObject;
  i: Integer;
begin
  obj := RSObject.Get(RSObjectType.BOUNDARY_OBJECT, x, y);
  writeln('a');
  if (obj.ref <> nil) then
  begin
    writeln(intToStr( obj.ID ));
    {while true do
    begin
      writeln(Length(obj.Model.vertices));
      sleep(5000);
    end; }
    //Mouse.Click(obj.MidPoint.X+5, OBJ.MidPoint.Y, MOUSE_LEFT);
    Exit;
  end
end

Procedure getMe;
var
  players: Array of RSPlayer;
  i: Integer;
begin
  writeln("Point("+inttostr(RSPlayer.me.Tile.X)+", "+inttostr(RSPlayer.me.Tile.Y)+"),");
  Exit;
  players := RSPlayer.AllPlayers;
  for i := 0 to High(players) do
  begin
    if players[i].Name <> "" then
      //writeln(players[i].Name);
      if players[i].Name = "Rsacc2fcom" then
      begin
        //writeln(players[i].Tile);
        writeln("Point("+inttostr(players[i].Tile.X)+", "+inttostr(players[i].Tile.Y)+"), ");
        Exit;
      end
  end
end

Function R_SelectGrandExchangeSlot1(Index: Int32): Boolean;
var
  slotWidget: RSWidget;
  T: Timer;
begin
  if (Index < 0) or (Index > 8) then
    Exit(False);

  if not R_GrandExchangeScreen then
    Exit;

  if R_CurrentGrandExchangeSlot = Index then
    Exit(True);

  writeln('a');
  slotWidget := RSWidget.Get(R_GRAND_EXCHANGE_SLOT_CONTAINER.Group, R_GRAND_EXCHANGE_SLOT_CONTAINER.Child, Index);
  if slotWidget.ref = nil then
    Exit(False);
  writeln('b');
  Mouse.Click(slotWidget.Bounds, MOUSE_LEFT);
  slotWidget.Free;

  T.Start;
  while R_CurrentGrandExchangeSlot <> Index do
  begin
    if T.ElapsedTime > 1000 then
      Exit(False);
    Wait(50, Random(50));
  end;
  Result := R_CurrentGrandExchangeSlot = Index;
end;

procedure gExMe;
var
  widget: RSWidget;
  i: Integer;
begin
  //writeln(BoolToStr(R_GrandExchangeScreen));
  //writeln(BoolToStr(R_GrandExchangeCanCollect));
  //R_GrandExchangeCollectAll;
  //R_SelectGrandExchangeSlot1(1);
  //sleep(500);
  widget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_X.Group, R_GRAND_EXCHANGE_OFFER_ADD_X.Child, R_GRAND_EXCHANGE_OFFER_ADD_X.Index);
  Mouse.Move(widget.Bounds.Middle);
  TerminateScript;
  for i := 0 to High(widget.Children) do
  begin
    writeln("widget x: " + inttostr(widget.child(i).Bounds.Middle.X) + " y: " + inttostr(widget.child(i).Bounds.Middle.Y));
    sleep(200);
    Mouse.Move(400, 400);
    writeln('d1');
  end

end

procedure getInv;
var
  invItems: Array of TRSInventoryItem;
  i: Integer;
begin
  invItems := R_GetAllInventoryItems;
  for i := 0 to high(invItems) do
    writeln(inttostr(invItems[i].ID));
end

Function R_GrandExchange_Offer_Add_Quantity1( Mode: TRSOfferQuantity; XAmount: Int32 = -1): Boolean;
var
  Button, widgeta: RSWidget;
begin

  widgeta := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_X.Group, R_GRAND_EXCHANGE_OFFER_ADD_X.Child, R_GRAND_EXCHANGE_OFFER_ADD_X.Index);
  //Mouse.Move(widget.Bounds.Middle);
  writeln('xdd');
  if widgeta.ref = nil then
    Exit(False);
  writeln('x2');
  Mouse.Click(widgeta.Bounds, MOUSE_LEFT);
  widgeta.Free;
  sleep(random(1000,1200));
  Keyboard.send(IntToStr(XAmount), VK_ENTER);
  Exit(True);

  writeln('Setting offer quantity2');
  if Button.ref = nil then
    Exit(False);
  writeln('Setting offer quantity3');
  Mouse.Click(Button.Bounds, MOUSE_LEFT);
  Button.Free;

  Result := True; //TODO: Check if the mode actually changed by checking button spriteId..
end;


procedure qonda;
var
  widget: RSWidget;
begin
  widget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_X.Group, R_GRAND_EXCHANGE_OFFER_ADD_X.Child, R_GRAND_EXCHANGE_OFFER_ADD_X.Index);
  if widget.ref = nil then
    Exit;
  writeln('Setting offer quantity33');Mouse.Move(widget.Bounds.Middle);
end

function qonda2: Boolean;
var
  widget: RSWidget;
begin
  widget := RSWidget.Get(R_GRAND_EXCHANGE_OFFER_ADD_X.Group, R_GRAND_EXCHANGE_OFFER_ADD_X.Child, R_GRAND_EXCHANGE_OFFER_ADD_X.Index);
  if widget.ref = nil then
    Exit(False);
  writeln('Setting offer quantity44');Mouse.Move(widget.Bounds.Middle);
  Result := True;
end

procedure tilesProc;
begin
  while true do
  begin
    sleep(100);
    getMe;
    //PauseScript;
  end;
end;


Function getSpiralTiles(x, y: Integer; Distance: integer = 0): Array of TPoint;
var
  i, resultIndex: Integer
begin
  resultIndex := ceil(pow((2*Distance+1),2))-1;

  for i := 0 to resultIndex do
  begin
    //writeln('('+inttostr(x)+','+inttostr(y)+'),');
    SetLength(Result,i+1);
    Result[i] := Point(x, y);
    if (abs(X) <= abs(Y)) and ((x <> y) or (x >= 0)) then
    begin
      if y >= 0 then
        x := x + 1
      else
        x := x - 1;
    end else
    begin
      if x >= 0 then
        y := y - 1
      else
        y := y + 1;
    end;
  end;
end;

Function R_GetClosestObject(ID: Integer; Offset: Integer = 10): RSObject; static;
var
  X, Y, i: Int32;
  Tiles: Array of TPoint;
  currentObject: RSObject;
begin
  Y := RSPlayer.Me.Tile.Y;
  X := RSPlayer.Me.Tile.X;
  Tiles := getSpiralTiles(X, Y, Offset);

  for i := 0 to High(Tiles) do
  begin
    currentObject := RSObject.Get(GAME_OBJECT, Tiles[i].X, Tiles[i].Y);
    if currentObject.ref = nil then currentObject := RSObject.Get(BOUNDARY_OBJECT, Tiles[i].X, Tiles[i].Y);
    if currentObject.ref = nil then currentObject := RSObject.Get(FLOOR_DECORATION, Tiles[i].X, Tiles[i].Y);
    if currentObject.ref = nil then currentObject := RSObject.Get(WALL_DECORATION, Tiles[i].X, Tiles[i].Y);
    if currentObject.Definition.ID = ID then
    begin
      Result := currentObject;
      Break;
    end;
  end;
  RSTypeArray(Tiles).Free;
  currentObject.Free;
end;

Function R_GetClosestObjectByName(Name: String; Offset: Integer = 10): RSObject;
var
  X, Y, i: Int32;
  Tiles: Array of TPoint;
  currentObject: RSObject;
begin
  Y := RSPlayer.Me.Tile.Y;
  X := RSPlayer.Me.Tile.X;
  Tiles := getSpiralTiles(X, Y, Offset);

  for i := 0 to High(Tiles) do
  begin
    currentObject := RSObject.Get(RSObjectType.GAME_OBJECT, Tiles[i].X, Tiles[i].Y);
    if currentObject.Definition.Name = Name then
    begin
      Result := currentObject;
      Break;
    end;
    currentObject := RSObject.Get(RSObjectType.BOUNDARY_OBJECT, Tiles[i].X, Tiles[i].Y);
    if currentObject.Definition.Name = Name then
    begin
      Result := currentObject;
      Break;
    end;
    currentObject := RSObject.Get(RSObjectType.FLOOR_DECORATION, Tiles[i].X, Tiles[i].Y);
    if currentObject.Definition.Name = Name then
    begin
      Result := currentObject;
      Break;
    end;
    currentObject := RSObject.Get(RSObjectType.WALL_DECORATION, Tiles[i].X, Tiles[i].Y);
    if currentObject.Definition.Name = Name then
    begin
      Result := currentObject;
      Break;
    end;
  end;
  RSTypeArray(Tiles).Free;
end;

procedure ResMouseClick(X, Y, R: Integer; Button: Integer);
begin
    Mouse.Click(x + ((RSClient.ViewPortWidth - 765) div 2) + random(-R, R), y + ((RSClient.ViewPortHeight - 503) div 2) + random(-R, R), Button);
end;
procedure ResMouseMove(X, Y: Integer; R: Integer = 0);
begin
    Mouse.Move(x + ((RSClient.ViewPortWidth - 765) div 2) + 5 + random(-R, R), y + ((RSClient.ViewPortHeight - 503) div 2) + random(-R, R));
end;

procedure condWait(Condition: Function:Boolean; timeout: integer; trueOrFalse: Boolean = true);
var
  timer: Timer;
begin
  timer.Start;
  if trueOrFalse then
  begin
    while (not Condition) do
    begin
      if timer.ElapsedTime >= timeout then
        Break;
      Wait(50 + Random(50));
    end;
  end else
  begin
    while (Condition) do
    begin
      if timer.ElapsedTime >= timeout then
        Break;
      Wait(50 + Random(50));
    end;
  end;
end;
 
type
  TFunctionParameter = function(value : Integer): Boolean;


function returnTrue(a:Integer):Boolean;
begin
  Result := true;
end;

function returnFalse:Boolean;
begin
  Result := false;
end;

function TFont.Create(name:String; size:Int32; fs:TFontStyles; fq:TFontQuality): TFont; static;
begin
  Result.Init();
  Result.SetName(name);
  Result.SetSize(size);
  Result.SetStyle(fs);
  Result.SetQuality(fq);
  Result.SetColor($FFFFFF);
end;

procedure TMufasaBitmap.DrawText(txt:String; pt:TPoint; font:TFont;
  color:Int32; align:Int32=0; shadow:Boolean=False; shadowDir:Byte=0); overload;
var
  bit:TBitmap;
  muf,flipMuf:TMufasaBitmap;
  W,H:Int32;
begin
  bit.Init();
  bit.GetCanvas().SetFont(font);
  bit.GetCanvas().GetBrush().SetStyle(bsClear);

  W := bit.GetCanvas().TextWidth(txt);
  H := bit.GetCanvas().TextHeight(txt);
  bit.SetWidth(W+1);
  bit.SetHeight(H+1);

  if align then
    pt := Point(pt.x-W, pt.y);

  muf := self.Copy(pt.x,pt.y,pt.x+W,pt.y+H);
  muf.DrawToCanvas(0,0,bit.getCanvas());

  if Shadow then
  begin
    bit.getCanvas().getFont().setColor(1);
    case ShadowDir of
      0:bit.GetCanvas().TextOut(0,0,txt);
      1:bit.GetCanvas().TextOut(1,0,txt);
      2:bit.GetCanvas().TextOut(2,0,txt);
      3:bit.GetCanvas().TextOut(2,1,txt);
      4:bit.GetCanvas().TextOut(2,2,txt);
      5:bit.GetCanvas().TextOut(1,2,txt);
      6:bit.GetCanvas().TextOut(0,2,txt);
      7:bit.GetCanvas().TextOut(0,1,txt);
    end;
    bit.GetCanvas().GetFont().SetColor(color);
    bit.GetCanvas().TextOut(1,1,txt);
  end else
  begin
    bit.GetCanvas().GetFont().SetColor(color);
    bit.GetCanvas().TextOut(0,0,txt);
  end;

  muf.LoadFromTBitmap(bit);
  muf.DrawTransparent(pt.x,pt.y,self);

  muf.Free();
  bit.Free();
end;

var
  PROGGY_FONT := TFont.Create('Tahoma', 7, [fsBold], fqCleartype);

var
  mibool: Boolean;
  iskey: Boolean;
  obj: RSOBject;
  widget: RSWidget;
  dif, clickX, clickY: integer;
  bmp: TMufasaBitmap;
  w, h: Int32;
begin

  GetClientDimensions(W, H);
  EIOS_SetGraphicsDebugging(R_EIOS, True);

  Bmp.Init;
  Bmp.SetPersistentMemory(PtrUInt(EIOS_GetDebugImageBuffer(R_EIOS)), w, h);

  Bmp.Rectangle([0, 0, w - 1, h - 1], $00);

  client.GetMBitmaps().AddBMP(bmp);
  bmp.DrawText("Hola", Point(20,20), $FFFFFF);
  bmp.DrawText("Hola", Point(20,30), $FFFFFF);
  bmp.DrawText("Hola", Point(20,40), $FFFFFF);
  //bmp.DrawTPA(TPAFromText("holas", "/StatChars07", w, h), $FFFFFF);

  bmp.free;
  //bmp.drawText("Holasss", Point(100,100), PROGGY_FONT, $FFFFFF, 0, False, 4);
  //client.GetMBitmaps().AddBMP(bmp);

  terminatescript;
  writeln('log: '+inttostr(RSCLient.LoginState));  //24 = disconnected (370,300) - ,    Point(3212, 3206),    Point(3232, 3226),
  writeln('gst: '+inttostr(RSCLient.GameState));   //12 = banned ( ) -
  writeln('lsc: '+inttostr(RSCLient.loopcycle));
  Mouse.Move(360,320);
  TerminateScript;
  RInitializeTileSettings;
  RInitializeTileHeights;
  writeln('Reinitialized reflection');
  while true do
  begin
    widget := RSWidget.Get(R_TUTORIAL_PROGRESS.Group, R_TUTORIAL_PROGRESS.Child);
    writeln(RSWidget.Get(R_TUTORIAL_PROGRESS.Group, R_TUTORIAL_PROGRESS.Child).Width);
    terminatescript;
    if widget.ref <> nil then
    begin
      Mouse.Move(widget.Bounds.Middle.X, widget.Bounds.Middle.Y);
      writeln(widget.IsHidden);
      //simpleCondWait(@returnTrue(1));
    end else
    begin
      writeln('not found bro');
    end;
    sleep(2000);
  end;
  widget := RSWidget.Get(R_TUTORIAL_CHOOSE_NAME_FIELD.Group, R_TUTORIAL_CHOOSE_NAME_FIELD.Child);
  dif := RSClient.ViewportScale - RSClient.ViewPortHeight;
  if widget.ref <> nil then
  begin
    Mouse.Move(((RSClient.ViewPortWidth * widget.Bounds.Middle.x) div 765), ((RSClient.ViewPortHeight * widget.Bounds.Middle.y) div 503) );
  end;
  TErminateScript;
  while true do
  begin
    wait(2000);
    writeln("Me:");  
    getme;
    //writeln(RSPlayer.me.Tile.InBox(Box(3138, 3458, 3144, 3463)));
    writeln("Grain:");
    obj := R_GetClosestObjectByName("Flower", 0);
    writeln(obj.Tile);

  end;
  terminatescript;

  //RSetup;

  writeln(R_NPC_GetClosest(3313).Tile);
  writeln(booltostr(RSPlayer.me.isAnimating));
  //writeln(R_GetAllInventoryITems[1]);
  writeln(RSObject.Get(RSObjectType.BOUNDARY_OBJECT, 3142, 3457).Definition.Name);
  //writeln(RSWidget.Get(R_TUTORIAL_CHOOSE_ACCEPT_FIXED.Group, R_TUTORIAL_CHOOSE_ACCEPT_FIXED.Child, R_TUTORIAL_CHOOSE_ACCEPT_FIXED.Index).ref);
 // writeln(RSClient.IsResizeable);

 // Mouse.Click(300, 235, MOUSE_RIGHT);
  sleep(500);
  // Mouse.Click(200, 150, MOUSE_RIGHT);
  TerminateScript;
  writeln(booltostr(R_IsEquipped(1949)));
  writeln('log: '+inttostr(RSCLient.LoginState));  //24 = disconnected   Point(3212, 3206),    Point(3232, 3226),
  writeln('gst: '+inttostr(RSCLient.GameState));
  writeln('lsc: '+inttostr(RSCLient.loopcycle));
  //writeln(RSPlayer.me.name);
  //writeln(inttostr(length(RSClient.AllNPCs)));
  //presskey(13);
  //tilesProc;
  //writeln(inttostr(RSPlayer.me.SkillLevel(7)));
end.
