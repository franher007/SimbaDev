{$i reflection/reflection.simba}

const
  flourPotID =  1933;
  coinsID = 995;
  waterBucketID = 1929;
  potID = 1931;
  bucketID = 1925;
  pizzaBaseID = 2283;
  grainID = 1947;

  notedFlourPotID =  1934;
  notedWaterBucketID = 1930;
  notedPotID = 1932;
  notedBucketID = 1926;
  notedPizzaBaseID = 2284;
  notedGrainID = 1948;


var
  pizzasDone, runs, floursDone      : Integer;
  timerTrack                        : Timer;


Procedure WriteLnEx(string: String);
begin
  writeln("[0]: " + string);
end;

var
  player                : RSPlayer;

Function RSObject.MidPoint: TPoint;
var
  model: RSModel;
  triangles: Array of T2DTriangle;
  points: TPointArray;
  i: Int32;
begin
  model := self.Model;
  triangles := model.Project(localtile.X, localtile.Y, localtile.GetHeight(), -1);
  model.Free;

  for i := 0 to high(triangles) do
  begin
    points += triangles[i].A;
    points += triangles[i].B;
    points += triangles[i].C;
  end;

  Result := MiddleTPA(points);
end;

Function TRSInventoryItem.MidPoint: TPoint;
begin
  Result := self.Bounds.Middle;
end

function TileOnMM(Tile: RSTile): Boolean;
var
  W, H, MMCX, MMCY: Int32;
  Temp: TPointArray;
begin
  GetClientDimensions(W, H);
  if RSClient.IsResizeable then
  begin
    MMCX := (W - 82);   //From RSTile.
    MMCY := 84;
  end else
    begin
      MMCX := (W - 122);
      MMCY := 84;
    end;

  SetLength(Temp, 1);
  Temp[0] := Tile.ToLocal.TileToMM;
  FilterPointsPie(Temp, 0.0, 360.0, 0.0, 76.0, MMCX, MMCY);
  Result := Length(Temp) = 1;
end;

{$IFNDEF CODEINSIGHT}
    {*Credit JuKKa*}
function WindPath(Xs, Ys, Xe, Ye, Gravity, Wind, MaxStep, TargetArea: Extended): TPointArray;
var
  VeloX, VeloY, WindX, WindY, VeloMag, Dist, RandomDist, LastDist: Extended;
  Step, Sqrt2, Sqrt3, Sqrt5: Extended;
  LastX, LastY: Integer;
begin
  Sqrt2:= Sqrt(2);
  Sqrt3:= Sqrt(3);
  Sqrt5:= Sqrt(5);
  while Hypot(Xs - Xe, Ys - Ye) > 1 do
  begin
    Dist:= hypot(Xs - Xe, Ys - Ye);
    Wind:= MinE(Wind, Dist);
    if Dist >= TargetArea then
    begin
      WindX:= WindX / Sqrt3 + (Random(Round(Wind) * 2 + 1) - Wind) / Sqrt5;
      WindY:= WindY / Sqrt3 + (Random(Round(Wind) * 2 + 1) - Wind) / Sqrt5;
    end else
    begin
      WindX:= WindX / Sqrt2;
      WindY:= WindY / Sqrt2;
      if (MaxStep < 3) then
        MaxStep:= random(3) + 3.0
      else
        MaxStep:= MaxStep / Sqrt5;
    end;
    VeloX:= VeloX + WindX;
    VeloY:= VeloY + WindY;
    VeloX:= VeloX + Gravity * (Xe - Xs) / Dist;
    VeloY:= VeloY + Gravity * (Ye - Ys) / Dist;
    if Hypot(VeloX, VeloY) > MaxStep then
    begin
      RandomDist:= MaxStep / 2.0 + random(0, (round(MaxStep) div 2));
      VeloMag:= sqrt(VeloX * VeloX + VeloY * VeloY);
      VeloX:= (VeloX / VeloMag) * RandomDist;
      VeloY:= (VeloY / VeloMag) * RandomDist;
    end;
    LastX:= Round(Xs);
    LastY:= Round(Ys);
    Xs:= Xs + VeloX;
    Ys:= Ys + VeloY;
    SetArrayLength(Result, GetArrayLength(Result) + 1);
    Result[High(Result)] := Point(Round(Xs), Round(Ys));
    Step:= Hypot(Xs - LastX, Ys - LastY);
    LastDist:= Dist;
  end;
end;
{$ENDIF}

function RSPlayer.WalkToTileMM(Tile: RSTile): Boolean;
var
  Point: TPoint;
begin
  Result := False;
  if not TileOnMM(Tile) then
  begin
    Exit;
  end;

  Point := Tile.ToLocal.TileToMM;
  Mouse.Move(Point);
  Wait(RandomRange(150, 220));
  Mouse.Click(MOUSE_LEFT);
  Result := True;
end;

function RSPlayer.WalkToTileMS(Tile: RSTile): Boolean;
var
  Point: TPoint;
begin
  Result := False;

  Point := Tile.ToLocal.TileToMS;
  Mouse.Move(Point);
  Wait(RandomRange(150, 220));
  Mouse.Click(MOUSE_LEFT);
  Result := True;
end;

function RSPlayer.FFlag(
  TileDist: Integer = 0; Timeout: Integer = -1): Boolean;
var
  Timer, StuckTimer: Int64;
  PrevTile, MyDest, MyTile : RSTile;
begin
  Timer := GetTickCount();
  StuckTimer := GetTickCount();

  MyTile := Self.Tile;
  PrevTile := MyTile;
  MyDest := Self.Destination;

  while Distance(MyTile.X, MyTile.Y, MyDest.X, MyDest.Y) > TileDist do
  begin
    if (Timeout > 0) and ((GetTickCount() - Timer) > Timeout) then
      Exit(False);

    if (GetTickCount() - StuckTimer) > 800 then
    begin
      if (MyTile.X = PrevTile.X) and (MyTile.Y = PrevTile.Y) then
        Exit(false);
      StuckTimer := GetTickCount();
      PrevTile := MyTile;
    end;

    Wait(RandomRange(200, 250));

    MyTile := Self.Tile;
    MyDest := Self.Destination;
  end;

  Exit(True);
end;

function RSPlayer.WalkPathMM(Path: array of RSTile; Randomness, FlagDist: Integer; Inverted: Boolean): Boolean;
var
  Index, Timer, Tries: Int64;
begin
  if Inverted then InvertTPA(Path);
  while Distance(Path[High(Path)], self.Tile) > (FlagDist + Randomness + 1) do
  begin
    for Index := High(Path) downto 0 do
      if TileOnMM(Path[Index]) then
        Break;

    if (Index = -1) then
      Break;
    Wait(800 + Random(100));
    if WalkToTileMM(Path[Index]) then
    begin
      Timer := (GetTickCount() + 20000);
      while Distance(Path[Index], self.Tile) > FlagDist do
      begin
        Wait(500 + Random(100));
        if (GetTickCount() > Timer) or ((Index <> High(Path)) and (TileOnMM(Path[Index+1]))) then
          Break;
      end;

      if (not (Distance(Path[Index], self.Tile) <= 5)) and ((Index <> High(Path)) and (not TileOnMM(Path[Index+1]))) then
      begin
        Inc(Tries);
      end;
    end else
    begin
      Inc(Tries);
      wait(800+Random(600));
    end;
    if Tries >= 10 then Break;
  end;
  FFlag(FlagDist);
  Result := Distance(Path[High(Path)], self.Tile) <= (FlagDist + Randomness + 1);
end;

function RSPlayer.WalkStraightPathMM(Path: Array of RSTile; Reverse: Boolean = False): Boolean;
type
  RSTileArray = array of RSTile;
var
  I: Integer;
  TempPath: RSTileArray;
begin
  TempPath := RSTileArray(CopyTPA(Path));
  if Length(TempPath) = 0 then
    Exit;
  if Reverse then
    InvertTPA(TempPath);
  for I := 0 to High(TempPath) do
    if not ((TileOnMM(TempPath[I]) and
      Self.WalkToTileMM(TempPath[I])) or Self.BlindWalkMM(TempPath[I])) then
      Exit(False);
  Result := True;
end;

function RSPlayer.BlindWalkMS(Tile: RSTile; Dist: Integer = 2): Boolean;
var
  I, Tries: Integer;
  OurTile: RSTile;
  CTRLPoints: TPointArray;
begin
  repeat
  OurTile := self.Tile;
  CtrlPoints := WindPath(
    OurTile.x, OurTile.y, Tile.x, Tile.y, 5.0, 2.5, 1.5, 1.0);
  Inc(Tries);
  if(Tries > 20)then
    Exit;
  for I := High(CtrlPoints) downto 0 do
  if Self.WalkToTileMS(CtrlPoints[I]) then
  begin
    Result := Distance(self.Tile, Tile) <= Dist;
    Break;
  end;
  until(Result);
end;

function RSPlayer.WalkToTileMSold(Tile: RSTile): Boolean;
begin
  Tile := Point(0, 0);
  {if not IsLoggedIn then
    Exit;
  Point := Reflect.Tiles.TileToMS(Tile);
  if (Point.X = -1) or (Point.Y = -1) then
    Exit;
  Reflect.Mouse.Move(Point, 0, 0);
  Wait(RandomRange(50, 100));
  if Reflect.Text.IsUpText('Walk here', 50) then
    Reflect.Mouse.Click(Mouse_Left)
  else
  begin
    Reflect.Mouse.Click(Mouse_Right);
    Wait(RandomRange(400, 500));
    if not Reflect.Text.ChooseOption('Walk here') then
      Reflect.Text.ChooseOption('Cancel')
  end;
  Timer.Start;
  while not Self.IsMoving do
  begin
    if Timer.ElapsedTime > 2500 then
      Break;
    Wait(150);
  end;
  Timer.Restart;
  while Self.IsMoving do
    Wait(250);
  Result := Timer.ElapsedTime < 30000; }
  Result := False;
end;

function RSPlayer.BlindWalkMM(Tile: RSTile; Dist: Integer = 5): Boolean;
type
  RSTileArray = array of RSTile;
begin
  Result := (TileOnMM(Tile) and Self.WalkToTileMM(Tile)) or
    Self.WalkPathMM(RSTileArray(WindPath(
      Self.Tile.X, Self.Tile.Y, Tile.X, Tile.Y,
      5.0, 2.5, 1.0, 1.0)), 0, Dist, false);
end;

function RSPlayer.WalkTo(destination: String): Boolean;
var
  geToBankTiles, bankToCookTiles, cookToBankTiles, bankToGETiles, choosenTile: Array of RSTile;
begin
  geToBankTiles := [Point(3165, 3486),
                    Point(3166, 3471),
                    Point(3170, 3457),
                    Point(3182, 3449),
                    Point(3183, 3445)];

  bankToCookTiles := [Point(3183, 3444),
                      Point(3182, 3451),
                      Point(3173, 3452),
                      Point(3165, 3451),
                      Point(3157, 3448),
                      Point(3151, 3444),
                      Point(3146, 3441),
                      Point(3143, 3440)];

  cookToBankTiles := [Point(3143, 3440),
                      Point(3146, 3441),
                      Point(3151, 3444),
                      Point(3157, 3448),
                      Point(3165, 3451),
                      Point(3173, 3452),
                      Point(3182, 3451),
                      Point(3183, 3444)];

  bankToGETiles   := [Point(3184, 3444),
                      Point(3178, 3459),
                      Point(3166, 3460),
                      Point(3166, 3468),
                      Point(3164, 3481),
                      Point(3164, 3484)];

   case destination of
    "bankToCook": begin choosenTile := bankToCookTiles end;
    "geToBank": begin choosenTile := geToBankTiles end;
    "cookToBank": begin choosenTile := cookToBankTiles end;
    "bankToGe": begin choosenTile := bankToGETiles end;
   end;

  self.WalkPathMM(choosenTile, 0, 1, False);
  writeln(self.Tile);
  while self.Tile <> choosenTile[high(choosenTile)] do
  begin
    writeln('Final ' + destination + ' walk step');
    self.WalkToTileMS(choosenTile[high(choosenTile)]);
    Sleep(RandomRange(2000, 2500));
  end
  Result:=True;
end;

procedure grandExchange(needFlour: Boolean; needWater: Boolean);
var
  exchangeBooth: RSObject;
  i: Integer;

begin
  writelnex('Doing GE');
  exchangeBooth := RSObject.Get(RSObjectType.BOUNDARY_OBJECT, 3164, 3487);
  if (exchangeBooth.ref = nil) then
  begin
    writelnex("Exchange not found");
    TerminateScript;
  end
  while not R_GrandExchangeScreen do
  begin
    Mouse.Click(exchangeBooth.MidPoint, MOUSE_LEFT);
    sleep(random(2000,2500));
  end
  if R_GrandExchange_EmptyAllSlots then sleep(random(700,100));;
  if R_GrandExchangeCollectAll then sleep(random(700,1000));

  //SELL STUFF
  R_GrandExchange_Sell(notedPizzaBaseID, TRSOfferQuantity.ALL, 1, TRSOfferPrice.X, 300);
  sleep(random(700,1000));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));

  //BUY STUFF
  if needFlour then
    if R_GrandExchange_Buy("Pot of flour", TRSOfferQuantity.X, 300, TRSOfferPrice.X, 285) then sleep(random(1000,1500));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));

  if needWater then
    if R_GrandExchange_Buy("Bucket of water", TRSOfferQuantity.X, 300, TRSOfferPrice.PLUSFIVE) then sleep(random(700,1000));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));

  //SELL MORE STUFF
  R_GrandExchange_Sell(notedBucketID);
  sleep(random(700,1000));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));
  R_GrandExchange_Sell(notedPotID, TRSOfferQuantity.ALL, 1, TRSOfferPrice.MINUSFIVE );
  sleep(random(700,1000));
  if R_GrandExchangeCollectAll then sleep(random(700,1000));

  if not R_GrandExchangeCollectAll then
  begin
    writelnex('Cant collect items,  NOTsleeping for 30 secs');
    sleep(random(15000,30000));
    R_GrandExchangeCollectAll;
    sleep(random(700,1000));
  end

  R_GrandExchangeScreen_Close;
  sleep(random(300,500));
  //TerminateScript;
end

procedure withdrawItems(nFlour: Boolean = False; nWater: Boolean = False);
var
  bankBooth: RSObject;
  i, currentBases: Integer;
  coins, flourPot, waterBucket: TRSBankItem;
begin
  currentBases := R_CountInventoryItem(pizzaBaseID);
  pizzasDone += currentBases;
  writelnex("BASES: " + intToStr(currentBases) + " TOTAL: " + intToStr(pizzasDone) + " RUNS: " + intToStr(runs) + " TIME: " + intToStr(timerTrack.ElapsedTime div 1000));
  writelnex("Opening bank");
  bankBooth := RSObject.Get(RSObjectType.BOUNDARY_OBJECT, 3162, 3489);
  if (bankBooth.ref = nil) then
  begin
    writelnex("Bank not found");
    TerminateScript;
  end
  while not R_BankScreen do
  begin
    Mouse.Click(bankBooth.MidPoint, MOUSE_LEFT);
    sleep(random(2000,2500));
  end

  R_DepositAll_Items;
  writelnex('Deposited items');
  Sleep(RandomRange(500, 700));

  coins := R_FindBankItem(coinsID);
  flourPot := R_FindBankItem(flourPotID);
  waterBucket := R_FindBankItem(waterBucketID);

  //R_SetBankWithdrawMode(False);

  if ((flourPot.id = -1) or nFlour) or ((waterBucket.id = -1) or nWater) then
  begin
    writelnex("missing items, do some GE");
    //if (coins.id = -1) then TerminateScript;
    R_WithdrawItem(coins.ID);
    sleep(random(50,150));
    R_SetBankWithdrawMode(True);
    sleep(random(50,150));
    R_WithdrawItem(pizzaBaseID);
    sleep(random(50,150));
    R_WithdrawItem(bucketID);
    sleep(random(50,150));
    R_WithdrawItem(potID);
    sleep(random(50,150));
    R_SetBankWithdrawMode(False);
    //Mouse.click(485 + random(-5, 5),25 + random(-5, 5), MOUSE_LEFT);
    R_BankScreen_Close;
    sleep(random(400,650));
    //BankScreen.Close;
    if (nFlour and (flourPot.amount < 500)) then
    begin
      if(nWater and (waterBucket.amount < 500)) then
        grandExchange(True, True)
      else grandExchange(True, False);
    end
    else if(nWater and (waterBucket.amount < 500)) then
      grandExchange(False, True);

    grandExchange((flourPot.id = -1), (waterBucket.id = -1));
    Exit;
  end

  //R_SetBankQuantityMode(TRSBankQuantity.ALL);
  sleep(random(500,700));
  R_WithdrawItem(flourPot.ID, 9);
  sleep(random(150,150));
  R_WithdrawItem(waterBucket.ID, 9);
  sleep(random(350,150));
  //Mouse.click(485 + random(-5, 5),25 + random(-5, 5), MOUSE_LEFT);
  R_BankScreen_Close;
  sleep(random(600,850));
  //BankScreen.Close;
end

procedure makePizzaBase;
var
  i, previousFlour: Integer;
  coins, flourPot, waterBucket: Array of TRSInventoryItem;
begin

  flourPot := R_GetInventoryItem(flourPotID);
  waterBucket := R_GetInventoryItem(waterBucketID);
  previousFlour := R_CountInventoryItem(flourPotID)

  if (Length(flourPot) <= 0) or (Length(waterBucket) <= 0) then withdrawItems;

  writelnex(intToStr(previousFlour) + " flours");

  Mouse.click(flourPot[random(0,high(flourPot)-1)].MidPoint, MOUSE_LEFT);
  sleep(random(50,100));
  Mouse.Click(waterBucket[random(0,high(waterBucket)-1)].MidPoint, MOUSE_LEFT);
  sleep(random(700,900));
  writelnex("Choosing Option");
  R_ChatSkillChooseOptions(3);
  sleep(random(1400,1600));
  if (previousFlour = R_CountInventoryItem(flourPotID)) then
  begin
    writelnex('OptionFailsafe');
    R_ChatSkillChooseOptions(3);
  end
  writelnex('Past failsafe');
  //while R_InventoryCount < 27 do sleep(50);
  while (R_InventoryCount < 27) AND (R_CountInventoryItem(flourPotID) >= 1) AND (R_CountInventoryItem(waterBucketID) >= 1) do sleep(50);
  //TerminateScript;
end;

procedure withdrawFlourItems;
var
  bankBooth: RSObject;
  i, currentFlourPots: Integer;
  emptyPot, grain: TRSBankItem;
begin
  currentFlourPots := R_CountInventoryItem(flourPotID);
  floursDone += currentFlourPots;
  writelnex("FLOURS: " + intToStr(currentFlourPots) + " TOTAL: " + intToStr(floursDone) + " RUNS: " + intToStr(runs) + " TIME: " + intToStr(timerTrack.ElapsedTime div 1000));
  writelnex("Opening bank");
  bankBooth := RSObject.Get(RSObjectType.GAME_OBJECT, 3186, 3444);
  if (bankBooth.ref = nil) then
  begin
    writelnex("Bank not found");
    TerminateScript;
  end
  while not R_BankScreen do
  begin
    Mouse.Click(bankBooth.MidPoint, MOUSE_LEFT);
    sleep(random(2000,2500));
  end

  R_DepositAll_Items;
  writelnex('Deposited all items');
  Sleep(RandomRange(500, 700));

  emptyPot := R_FindBankItem(potID);
  grain := R_FindBankItem(grainID);

  //R_SetBankWithdrawMode(False);

  if ((emptyPot.id = -1)) or ((grain.id = -1)) then
  begin
    writelnex("missing items, TERMINATING but should do some GE");
    TerminateScript;
  end;

  //R_SetBankQuantityMode(TRSBankQuantity.ALL);
  sleep(random(500,700));
  R_WithdrawItem(emptyPot.ID, 14);
  sleep(random(150,150));
  R_WithdrawItem(grain.ID, 14);
  sleep(random(350,150));
  //Mouse.click(485 + random(-5, 5),25 + random(-5, 5), MOUSE_LEFT);
  R_BankScreen_Close;
  sleep(random(600,850));
  //BankScreen.Close;
end

function StrInArray(const Value : String;const ArrayOfString : Array of String) : Boolean;
var
 Loop : String;
begin
  for Loop in ArrayOfString do
  begin
    if Value = Loop then
    begin
       Exit(true);
    end;
  end;
  result := false;
end;

procedure makeFlour;
var
  cookStairs, cookDoor, hopper, hopperControl, cookMill: RSObject;
  i: Integer;
begin
  writeln('Making flour!');

  //TODO check if not at cook then die

  //openCookDoor;
  writeln('Opening door');
  cookDoor := RSObject.Get(RSObjectType.BOUNDARY_OBJECT, 3143, 3443);
  if (cookDoor.ref = nil) then
  begin
    writelnex("CookDoor not found");
    Exit;
  end;
  while player.Tile <> Point(3143, 3444) do
  begin
    Mouse.Click(cookDoor.MidPoint, MOUSE_LEFT);
    sleep(random(2000,2500));
  end;

  //CheckMill;
  writeln('Checking Mill');
  cookMill := RSObject.Get(RSObjectType.GAME_OBJECT, 3140, 3449);
  if (cookMill.ref = nil) then
  begin
    writelnex("cookMill not found");
    Exit;
  end;

  Mouse.Click(cookMill.MidPoint, MOUSE_RIGHT);
  Wait(50 + RandomRange(50, 100));
  while (StrInArray("Empty Flour bin", R_MenuItems)) AND (R_CountInventoryItem(potID) > 1) do
  begin
    R_ChooseOptions(['Empty Flour bin']);
    sleep(random(1000,1500));
    Mouse.Click(cookMill.MidPoint, MOUSE_RIGHT);
  end;


  //ClimbStairs;
  writeln('Climbing Stairs');
  cookStairs := RSObject.Get(RSObjectType.GAME_OBJECT, 3144, 3447);
  if (cookStairs.ref = nil) then
  begin
    writelnex("cookStairs not found");
    Exit;
  end;
  Mouse.Click(cookStairs.MidPoint, MOUSE_LEFT);
  sleep(random(5000,3500));

  Mouse.Click(cookStairs.MidPoint, MOUSE_RIGHT);
  Wait(50 + RandomRange(50, 100));
  R_ChooseOptions(['Climb-up Staircase']);
  sleep(random(3000,3500));

  //third floor now
  writeln('Filling Hopper');
  hopper := RSObject.Get(RSObjectType.GAME_OBJECT, 3142, 3452);
  if (hopper.ref = nil) then
  begin
    writelnex("hopper not found");
    Exit;
  end;
  Mouse.Click(hopper.MidPoint, MOUSE_LEFT);
  sleep(random(5000,3500));

  writeln('Activating Hopper');
  hopperControl := RSObject.Get(RSObjectType.GAME_OBJECT, 3141, 3453);
  if (hopperControl.ref = nil) then
  begin
    writelnex("hopperControl not found");
    Exit;
  end;
  Mouse.Click(hopperControl.MidPoint, MOUSE_LEFT);
  sleep(random(2000,2500));

  //TODO better check while shouldAddGrains do
  for i := 0 to 16 do
  begin
    if (R_CountInventoryItem(grainID) < 1) then Break;
    Mouse.Click(hopper.MidPoint, MOUSE_LEFT);
    sleep(random(1000,1500));
    Mouse.Click(hopperControl.MidPoint, MOUSE_LEFT);
    sleep(random(1000,1500));
  end;

  hopper.Free;
  hopperControl.Free;

  //climbDown;
  writeln('Going down');
  Mouse.Click(cookStairs.MidPoint, MOUSE_LEFT);
  sleep(random(6000,3500));

  Mouse.Click(cookStairs.MidPoint, MOUSE_RIGHT);
  Wait(50 + RandomRange(50, 100));
  R_ChooseOptions(['Climb-down Staircase']);
  sleep(random(3000,3500));

  cookStairs.free;

  Mouse.Click(cookMill.MidPoint, MOUSE_LEFT);
  sleep(random(3000,2500));
  writeln('Emptyign flour pot');

  Mouse.Click(cookMill.MidPoint, MOUSE_RIGHT);
  Wait(50 + RandomRange(50, 100));
  while (StrInArray("Empty Flour bin", R_MenuItems)) AND (R_CountInventoryItem(potID) > 1) do
  begin
    R_ChooseOptions(['Empty Flour bin']);
    sleep(random(1000,1500));
    Mouse.Click(cookMill.MidPoint, MOUSE_RIGHT);
  end;
  sleep(random(400, 550));
  cookMill.Free;

  writeln('Exiting door');
  while player.Tile <> Point(3143, 3443) do
  begin
    Mouse.Click(cookDoor.MidPoint, MOUSE_LEFT);
    sleep(random(2000, 2500));
  end;
  cookDoor.Free;

  //OutOfCook;
  //bank north booth 3186 3444

end;

begin
  timerTrack.Start;
  pizzasDone := 0;
  runs := 0;
  srl.Setup([]);
  player := RSPlayer.Me;
  Mouse.Setup();
  Sleep(50);
  ClearDebug;
  while True do
  begin
    Try
      inc(runs);
      withdrawFlourItems;
      sleep(random(700, 1000));
      player.walkTo("bankToCook");
      sleep(random(700, 1000));
      makeFlour;
      player.walkTo("cookToBank");
      sleep(random(700, 1000));
    Except
      writelnex('error');
    end;
  end;
  TerminateScript;

  if player.Tile <> Point(6464, 6208) then
  begin
    writelnex("Walking to init spot");
    player.WalkToTileMS(Point(6464, 6208));
    sleep(random(500, 700));
  end

  runs := 0;

  while(true) do
  begin

    Try

      //if R_InventoryCount >= 27 then
      if (R_CountInventoryItem(flourPotID) < 1) or (R_CountInventoryItem(waterBucketID) < 1) or (R_InventoryCount > 27 ) then
      begin
        inc(runs);
        writelnex("No more prime material");
        withdrawItems;
      end else
      begin
        makePizzaBase;
        sleep(100);
      end;
      if runs mod 30 = 0 then
      begin
        writelnex('30 rounds! a GE');
        withdrawItems(true, true);
      end;
    Except
      writelnex('error');
    end;
  end;

  player.Free;
end.
